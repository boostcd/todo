@NonCPS
def org(repo) {
	def matcher = repo =~ /https:\/\/github.com\/([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)(\.git)?/
	def org = matcher[0][1]
	return org
}

@NonCPS
def uri(repo) {
	def matcher = repo =~ /https:\/\/github.com\/([a-zA-Z0-9-_]+)\/([a-zA-Z0-9-_]+)(\.git)?/
	def uri = matcher[0][2]
	return uri
}

node('maven') {

	properties([
	  parameters([
		 string(name: 'REPO'),
	  ])
	])

	def uri = uri(params.REPO)
	def org = org(params.REPO)

	def developmentVersion
	def releaseVersion

	stage("checkout") {
		withCredentials([usernamePassword(credentialsId: 'git', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
			git branch: "master", url: "https://$USERNAME:$PASSWORD@github.com/$org/$uri"			
		}
	}
	
	stage("increment version") {
		def pom = readFile('pom.xml');
		def matcher = new XmlSlurper().parseText(pom).version =~ /(\d+\.\d+\.)(\d+)(\-SNAPSHOT)/
		developmentVersion = "${matcher[0][1]}${matcher[0][2].toInteger()+1}-SNAPSHOT"
		releaseVersion = "${matcher[0][1]}${matcher[0][2]}"
	}
	
	stage("perform release") {
        sh "git config --global user.email \"jenkins@estafet.com\""
        sh "git config --global user.name \"jenkins\""
        withMaven(mavenSettingsConfig: 'maven') {
			sh "mvn release:clean release:prepare release:perform -DreleaseVersion=${releaseVersion} -DdevelopmentVersion=${developmentVersion} -DpushChanges=false -DlocalCheckout=true -DpreparationGoals=initialize -B -DskipTests"
			sh "git push origin master"
			sh "git tag ${releaseVersion}"
			sh "git push origin ${releaseVersion}"
		} 
	}	

}

